AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation Template Coder Host: Creates a Coder stack using a single
  EC2 instance running docker. This template uses the AWS CloudFormation
  bootstrap scripts to install the packages and files necessary to deploy
  docker, Git and Coder at instance launch time.
Parameters:
  VolumeSize:
    Description: Size of EBS volume in GB
    Type: Number
    Default: 50
  InstanceType:
    Description: Docker host EC2 instance type
    Type: String
    Default: t3.xlarge
    AllowedValues:
      - t2.micro
      - t3.large
      - t3.xlarge
      - t3.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  EnvironmentCount:
    Description: Number of coder environments to create
    Type: Number
    Default: 8
    MaxValue: 8
    MinValue: 1
    ConstraintDescription: number between 1 - 8
  DomainName:
    Description: Primary domain name to use for DNS record (levelup-program.com)
    Type: String
    Default: levelup-program.com
  SubDomainName:
    Description: Subdomain prefix to use for DNS record
    Type: String
    Default: coder
  GitHubRepoURL:
    Description: GitHub Repository to clone
    Type: String
Mappings:
  AWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t3.large:
      Arch: HVM64
    t3.xlarge:
      Arch: HVM64
    t3.2xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0c02fb55956c7d316
    us-east-2:
      HVM64: ami-064ff912f78e3e561
    us-west-1:
      HVM64: ami-04a50faf2a2ec1901
    us-west-2:
      HVM64: ami-00ee4df451840fa9d
Resources:
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          Bootstrap:
            - AWSSetup
            - InstallDeps
          Configure:
            - 
              ConfigSet: "Bootstrap"
            - "InstallCaddy"
          Start:
            - 
              ConfigSet: "Configure"
            - "StartApplication"
            - "CloneRepos"
          default:
            - 
              ConfigSet: "Start"
        AWSSetup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerInstance '
                  - '         --configsets default '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          commands:
            update:
              command: "yum update -y"
          services:
            sysvinit:
              amazon-ssm-agent:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        InstallDeps:
          packages:
            yum:
              docker: []
              git: []
              curl: []
              nss: []
          sources:
            /opt/coder: https://github.com/level-up-program/coder-controller/archive/refs/heads/main.zip
            /opt/caddy: https://github.com/caddyserver/caddy/releases/download/v2.5.2/caddy_2.5.2_linux_amd64.tar.gz
          commands:
            docker-compose-step1:
              command: "curl -L \"https://github.com/docker/compose/releases/download/v2.9.0/docker-compose-linux-x86_64\" -o /usr/local/bin/docker-compose"
              test: "test ! -e /usr/local/bin/docker-compose"
            docker-compose-step2:
              command: "chmod +x /usr/local/bin/docker-compose"
              test: "test ! -x /usr/local/bin/docker-compose"
            docker-compose-step3:
              command: "ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose"
              test: "test ! -h /usr/bin/docker-compose"
          services:
            sysvinit:
              docker:
                enabled: 'true'
                ensureRunning: 'true'
        InstallCaddy:
          packages:
            rpm:
              gh: https://github.com/cli/cli/releases/download/v2.14.7/gh_2.14.7_linux_amd64.rpm
          users:
            caddy:
              homeDir: /var/lib/caddy
          files:
            /etc/caddy/Caddyfile:
              content: !Sub |
                ${SubDomainName}.${DomainName}:8000 { 
                  reverse_proxy localhost:9000 
                }
                ${SubDomainName}.${DomainName}:8001 { 
                  reverse_proxy localhost:9001 
                }
                ${SubDomainName}.${DomainName}:8002 { 
                  reverse_proxy localhost:9002 
                }
                ${SubDomainName}.${DomainName}:8003 { 
                  reverse_proxy localhost:9003 
                }
                ${SubDomainName}.${DomainName}:8004 { 
                  reverse_proxy localhost:9004 
                }
                ${SubDomainName}.${DomainName}:8005 { 
                  reverse_proxy localhost:9005 
                }
                ${SubDomainName}.${DomainName}:8006 { 
                  reverse_proxy localhost:9006 
                }
                ${SubDomainName}.${DomainName}:8007 { 
                  reverse_proxy localhost:9007 
                }
                ${SubDomainName}.${DomainName}:8008 { 
                  reverse_proxy localhost:9008 
                }
              mode: '000644'
              owner: root
              group: root
            /etc/systemd/system/caddy.service:
              source: https://raw.githubusercontent.com/caddyserver/dist/master/init/caddy.service
              mode: '000644'
              owner: root
              group: root
          commands:
            install-step1:
              command: "cp caddy /usr/bin/"
              cwd: "/opt/caddy"
              test: "test ! -e /usr/bin/caddy"
            install-step2:
              command: "mkdir -p /var/lib/caddy"
              test: "test ! -e /var/lib/caddy"
            install-step3:
              command: "chown caddy /var/lib/caddy"
            install-step4:
              command: "echo '\nsystemctl restart caddy' >> /etc/rc.local"
            install-step5:
              command: "chmod +x /etc/rc.d/rc.local"
        StartApplication:
          commands:
            build:
              command: "make compose"
              env: 
                CODER_INSTANCE_COUNT: !Ref EnvironmentCount 
              cwd: "/opt/coder/coder-controller-main"
              test: "test ! -e /opt/coder/coder-controller-main/docker-compose.json"
            start:
              command: "make start"
              cwd: "/opt/coder/coder-controller-main"
          services:
            sysvinit:
              caddy:
                enabled: 'true'
                ensureRunning: 'true'
        CloneRepos:
          commands:
            clone: 
              command: "make clone"
              env: 
                TEAM_REPO: !Ref GitHubRepoURL
              cwd: "/opt/coder/coder-controller-main"
    Properties:
      Tags: 
        - Key: "USECASE"
          Value: "CODER"
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: coder-ec2-keypair
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          VolumeSize: !Ref 'VolumeSize'
          Encrypted: 'true'
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --configsets default '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerInstance '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

    CreationPolicy:
      ResourceSignal:
        Timeout: PT50M
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable access via ports 22, 443, 8000-9100'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8000'
          ToPort: '8100'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '9000'
          ToPort: '9100'
          CidrIp: 0.0.0.0/0
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Name: !Sub ${SubDomainName}.${DomainName}.
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt WebServerInstance.PublicIp
  CaddyRestartCommand:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: '2.2'
        description: 'Run a Caddy restart on Linux instances.'
        mainSteps:
        - action: aws:runShellScript
          name: runCommands
          inputs:
            timeoutSeconds: '60'
            runCommand:
            - "systemctl restart caddy"
      DocumentFormat: YAML
      DocumentType: Command
      Name: restart-caddy-service
      TargetType: /AWS::EC2::Instance

Outputs:
  PublicDomainName:
    Description: Domain name for newly created coder stack
    Value: !Sub https://${SubDomainName}.${DomainName}:8000
